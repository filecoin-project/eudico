// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package sca

import (
	"fmt"
	"io"
	"math"
	"sort"

	address "github.com/filecoin-project/go-address"
	abi "github.com/filecoin-project/go-state-types/abi"
	schema "github.com/filecoin-project/lotus/chain/consensus/hierarchical/checkpoints/schema"
	types "github.com/filecoin-project/lotus/chain/types"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufConstructorParams = []byte{130}

func (t *ConstructorParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufConstructorParams); err != nil {
		return err
	}

	// t.NetworkName (string) (string)
	if len(t.NetworkName) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NetworkName was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.NetworkName))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NetworkName)); err != nil {
		return err
	}

	// t.CheckpointPeriod (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CheckpointPeriod)); err != nil {
		return err
	}

	return nil
}

func (t *ConstructorParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ConstructorParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.NetworkName (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.NetworkName = string(sval)
	}
	// t.CheckpointPeriod (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.CheckpointPeriod = uint64(extra)

	}
	return nil
}

var lengthBufCheckpointParams = []byte{129}

func (t *CheckpointParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufCheckpointParams); err != nil {
		return err
	}

	// t.Checkpoint ([]uint8) (slice)
	if len(t.Checkpoint) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Checkpoint was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Checkpoint))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Checkpoint[:]); err != nil {
		return err
	}
	return nil
}

func (t *CheckpointParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CheckpointParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Checkpoint ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Checkpoint: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Checkpoint = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.Checkpoint[:]); err != nil {
		return err
	}
	return nil
}

var lengthBufSCAState = []byte{141}

func (t *SCAState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufSCAState); err != nil {
		return err
	}

	// t.NetworkName (address.SubnetID) (string)
	if len(t.NetworkName) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NetworkName was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.NetworkName))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NetworkName)); err != nil {
		return err
	}

	// t.TotalSubnets (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.TotalSubnets)); err != nil {
		return err
	}

	// t.MinStake (big.Int) (struct)
	if err := t.MinStake.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Subnets (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.Subnets); err != nil {
		return xerrors.Errorf("failed to write cid field t.Subnets: %w", err)
	}

	// t.CheckPeriod (abi.ChainEpoch) (int64)
	if t.CheckPeriod >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CheckPeriod)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CheckPeriod-1)); err != nil {
			return err
		}
	}

	// t.Checkpoints (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.Checkpoints); err != nil {
		return xerrors.Errorf("failed to write cid field t.Checkpoints: %w", err)
	}

	// t.CheckMsgsRegistry (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.CheckMsgsRegistry); err != nil {
		return xerrors.Errorf("failed to write cid field t.CheckMsgsRegistry: %w", err)
	}

	// t.Nonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return err
	}

	// t.BottomUpNonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.BottomUpNonce)); err != nil {
		return err
	}

	// t.BottomUpMsgsMeta (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.BottomUpMsgsMeta); err != nil {
		return xerrors.Errorf("failed to write cid field t.BottomUpMsgsMeta: %w", err)
	}

	// t.AppliedBottomUpNonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.AppliedBottomUpNonce)); err != nil {
		return err
	}

	// t.AppliedTopDownNonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.AppliedTopDownNonce)); err != nil {
		return err
	}

	// t.AtomicExecRegistry (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.AtomicExecRegistry); err != nil {
		return xerrors.Errorf("failed to write cid field t.AtomicExecRegistry: %w", err)
	}

	return nil
}

func (t *SCAState) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SCAState{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 13 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.NetworkName (address.SubnetID) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.NetworkName = address.SubnetID(sval)
	}
	// t.TotalSubnets (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.TotalSubnets = uint64(extra)

	}
	// t.MinStake (big.Int) (struct)

	{

		if err := t.MinStake.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.MinStake: %w", err)
		}

	}
	// t.Subnets (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Subnets: %w", err)
		}

		t.Subnets = c

	}
	// t.CheckPeriod (abi.ChainEpoch) (int64)
	{
		maj, extra, err := cr.ReadHeader()
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.CheckPeriod = abi.ChainEpoch(extraI)
	}
	// t.Checkpoints (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Checkpoints: %w", err)
		}

		t.Checkpoints = c

	}
	// t.CheckMsgsRegistry (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.CheckMsgsRegistry: %w", err)
		}

		t.CheckMsgsRegistry = c

	}
	// t.Nonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Nonce = uint64(extra)

	}
	// t.BottomUpNonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.BottomUpNonce = uint64(extra)

	}
	// t.BottomUpMsgsMeta (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.BottomUpMsgsMeta: %w", err)
		}

		t.BottomUpMsgsMeta = c

	}
	// t.AppliedBottomUpNonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AppliedBottomUpNonce = uint64(extra)

	}
	// t.AppliedTopDownNonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.AppliedTopDownNonce = uint64(extra)

	}
	// t.AtomicExecRegistry (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.AtomicExecRegistry: %w", err)
		}

		t.AtomicExecRegistry = c

	}
	return nil
}

var lengthBufSubnet = []byte{136}

func (t *Subnet) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufSubnet); err != nil {
		return err
	}

	// t.ID (address.SubnetID) (string)
	if len(t.ID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ID)); err != nil {
		return err
	}

	// t.ParentID (address.SubnetID) (string)
	if len(t.ParentID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ParentID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ParentID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ParentID)); err != nil {
		return err
	}

	// t.Stake (big.Int) (struct)
	if err := t.Stake.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.TopDownMsgs (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.TopDownMsgs); err != nil {
		return xerrors.Errorf("failed to write cid field t.TopDownMsgs: %w", err)
	}

	// t.Nonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return err
	}

	// t.CircSupply (big.Int) (struct)
	if err := t.CircSupply.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Status (sca.Status) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
		return err
	}

	// t.PrevCheckpoint (schema.Checkpoint) (struct)
	if err := t.PrevCheckpoint.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *Subnet) UnmarshalCBOR(r io.Reader) (err error) {
	*t = Subnet{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 8 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ID (address.SubnetID) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.ID = address.SubnetID(sval)
	}
	// t.ParentID (address.SubnetID) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.ParentID = address.SubnetID(sval)
	}
	// t.Stake (big.Int) (struct)

	{

		if err := t.Stake.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Stake: %w", err)
		}

	}
	// t.TopDownMsgs (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.TopDownMsgs: %w", err)
		}

		t.TopDownMsgs = c

	}
	// t.Nonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Nonce = uint64(extra)

	}
	// t.CircSupply (big.Int) (struct)

	{

		if err := t.CircSupply.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.CircSupply: %w", err)
		}

	}
	// t.Status (sca.Status) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Status = Status(extra)

	}
	// t.PrevCheckpoint (schema.Checkpoint) (struct)

	{

		if err := t.PrevCheckpoint.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.PrevCheckpoint: %w", err)
		}

	}
	return nil
}

var lengthBufFundParams = []byte{129}

func (t *FundParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufFundParams); err != nil {
		return err
	}

	// t.Value (big.Int) (struct)
	if err := t.Value.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *FundParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FundParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Value (big.Int) (struct)

	{

		if err := t.Value.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Value: %w", err)
		}

	}
	return nil
}

var lengthBufSubnetIDParam = []byte{129}

func (t *SubnetIDParam) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufSubnetIDParam); err != nil {
		return err
	}

	// t.ID (string) (string)
	if len(t.ID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ID)); err != nil {
		return err
	}
	return nil
}

func (t *SubnetIDParam) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SubnetIDParam{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ID (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.ID = string(sval)
	}
	return nil
}

var lengthBufCrossMsgs = []byte{130}

func (t *CrossMsgs) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufCrossMsgs); err != nil {
		return err
	}

	// t.Msgs ([]types.Message) (slice)
	if len(t.Msgs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Msgs was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Msgs))); err != nil {
		return err
	}
	for _, v := range t.Msgs {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Metas ([]schema.CrossMsgMeta) (slice)
	if len(t.Metas) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Metas was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Metas))); err != nil {
		return err
	}
	for _, v := range t.Metas {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *CrossMsgs) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CrossMsgs{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Msgs ([]types.Message) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Msgs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Msgs = make([]types.Message, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v types.Message
		if err := v.UnmarshalCBOR(cr); err != nil {
			return err
		}

		t.Msgs[i] = v
	}

	// t.Metas ([]schema.CrossMsgMeta) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Metas: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Metas = make([]schema.CrossMsgMeta, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v schema.CrossMsgMeta
		if err := v.UnmarshalCBOR(cr); err != nil {
			return err
		}

		t.Metas[i] = v
	}

	return nil
}

var lengthBufMetaTag = []byte{130}

func (t *MetaTag) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufMetaTag); err != nil {
		return err
	}

	// t.MsgsCid (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.MsgsCid); err != nil {
		return xerrors.Errorf("failed to write cid field t.MsgsCid: %w", err)
	}

	// t.MetasCid (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.MetasCid); err != nil {
		return xerrors.Errorf("failed to write cid field t.MetasCid: %w", err)
	}

	return nil
}

func (t *MetaTag) UnmarshalCBOR(r io.Reader) (err error) {
	*t = MetaTag{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.MsgsCid (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.MsgsCid: %w", err)
		}

		t.MsgsCid = c

	}
	// t.MetasCid (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.MetasCid: %w", err)
		}

		t.MetasCid = c

	}
	return nil
}

var lengthBufCrossMsgParams = []byte{130}

func (t *CrossMsgParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufCrossMsgParams); err != nil {
		return err
	}

	// t.Msg (types.Message) (struct)
	if err := t.Msg.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Destination (address.SubnetID) (string)
	if len(t.Destination) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Destination was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Destination))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Destination)); err != nil {
		return err
	}
	return nil
}

func (t *CrossMsgParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = CrossMsgParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Msg (types.Message) (struct)

	{

		if err := t.Msg.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Msg: %w", err)
		}

	}
	// t.Destination (address.SubnetID) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.Destination = address.SubnetID(sval)
	}
	return nil
}

var lengthBufErrorParam = []byte{129}

func (t *ErrorParam) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufErrorParam); err != nil {
		return err
	}

	// t.Code (int64) (int64)
	if t.Code >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Code-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ErrorParam) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ErrorParam{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Code (int64) (int64)
	{
		maj, extra, err := cr.ReadHeader()
		var extraI int64
		if err != nil {
			return err
		}
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Code = int64(extraI)
	}
	return nil
}

var lengthBufAtomicExec = []byte{131}

func (t *AtomicExec) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufAtomicExec); err != nil {
		return err
	}

	// t.Params (sca.AtomicExecParams) (struct)
	if err := t.Params.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Submitted (map[string]sca.OutputCid) (map)
	{
		if len(t.Submitted) > 4096 {
			return xerrors.Errorf("cannot marshal t.Submitted map too large")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajMap, uint64(len(t.Submitted))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Submitted))
		for k := range t.Submitted {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.Submitted[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}

		}
	}

	// t.Status (sca.ExecStatus) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
		return err
	}

	return nil
}

func (t *AtomicExec) UnmarshalCBOR(r io.Reader) (err error) {
	*t = AtomicExec{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Params (sca.AtomicExecParams) (struct)

	{

		if err := t.Params.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Params: %w", err)
		}

	}
	// t.Submitted (map[string]sca.OutputCid) (map)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.Submitted: map too large")
	}

	t.Submitted = make(map[string]OutputCid, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v OutputCid

		{

			if err := v.UnmarshalCBOR(cr); err != nil {
				return xerrors.Errorf("unmarshaling v: %w", err)
			}

		}

		t.Submitted[k] = v

	}
	// t.Status (sca.ExecStatus) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Status = ExecStatus(extra)

	}
	return nil
}

var lengthBufAtomicExecParams = []byte{130}

func (t *AtomicExecParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufAtomicExecParams); err != nil {
		return err
	}

	// t.Msgs ([]types.Message) (slice)
	if len(t.Msgs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Msgs was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Msgs))); err != nil {
		return err
	}
	for _, v := range t.Msgs {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Inputs (map[string]sca.LockedState) (map)
	{
		if len(t.Inputs) > 4096 {
			return xerrors.Errorf("cannot marshal t.Inputs map too large")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajMap, uint64(len(t.Inputs))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Inputs))
		for k := range t.Inputs {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.Inputs[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}

		}
	}
	return nil
}

func (t *AtomicExecParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = AtomicExecParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Msgs ([]types.Message) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Msgs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Msgs = make([]types.Message, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v types.Message
		if err := v.UnmarshalCBOR(cr); err != nil {
			return err
		}

		t.Msgs[i] = v
	}

	// t.Inputs (map[string]sca.LockedState) (map)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.Inputs: map too large")
	}

	t.Inputs = make(map[string]LockedState, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v LockedState

		{

			if err := v.UnmarshalCBOR(cr); err != nil {
				return xerrors.Errorf("unmarshaling v: %w", err)
			}

		}

		t.Inputs[k] = v

	}
	return nil
}

var lengthBufSubmitExecParams = []byte{131}

func (t *SubmitExecParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufSubmitExecParams); err != nil {
		return err
	}

	// t.Cid (string) (string)
	if len(t.Cid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cid was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Cid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cid)); err != nil {
		return err
	}

	// t.Abort (bool) (bool)
	if err := cbg.WriteBool(w, t.Abort); err != nil {
		return err
	}

	// t.Output (atomic.LockedState) (struct)
	if err := t.Output.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *SubmitExecParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SubmitExecParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Cid (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.Cid = string(sval)
	}
	// t.Abort (bool) (bool)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Abort = false
	case 21:
		t.Abort = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.Output (atomic.LockedState) (struct)

	{

		if err := t.Output.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Output: %w", err)
		}

	}
	return nil
}

var lengthBufSubmitOutput = []byte{129}

func (t *SubmitOutput) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufSubmitOutput); err != nil {
		return err
	}

	// t.Status (sca.ExecStatus) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
		return err
	}

	return nil
}

func (t *SubmitOutput) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SubmitOutput{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Status (sca.ExecStatus) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Status = ExecStatus(extra)

	}
	return nil
}

var lengthBufLockedState = []byte{130}

func (t *LockedState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufLockedState); err != nil {
		return err
	}

	// t.Cid (string) (string)
	if len(t.Cid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cid was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Cid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cid)); err != nil {
		return err
	}

	// t.Actor (address.Address) (struct)
	if err := t.Actor.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *LockedState) UnmarshalCBOR(r io.Reader) (err error) {
	*t = LockedState{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Cid (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.Cid = string(sval)
	}
	// t.Actor (address.Address) (struct)

	{

		if err := t.Actor.UnmarshalCBOR(cr); err != nil {
			return xerrors.Errorf("unmarshaling t.Actor: %w", err)
		}

	}
	return nil
}

var lengthBufOutputCid = []byte{129}

func (t *OutputCid) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufOutputCid); err != nil {
		return err
	}

	// t.Cid (string) (string)
	if len(t.Cid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cid was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Cid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cid)); err != nil {
		return err
	}
	return nil
}

func (t *OutputCid) UnmarshalCBOR(r io.Reader) (err error) {
	*t = OutputCid{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Cid (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.Cid = string(sval)
	}
	return nil
}
