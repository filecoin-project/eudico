// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package replace

import (
	"fmt"
	"io"
	"math"
	"sort"

	atomic "github.com/filecoin-project/lotus/chain/consensus/hierarchical/atomic"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufReplaceState = []byte{129}

func (t *ReplaceState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufReplaceState); err != nil {
		return err
	}

	// t.Owners (atomic.LockedState) (struct)
	if err := t.Owners.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *ReplaceState) UnmarshalCBOR(r io.Reader) error {
	*t = ReplaceState{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Owners (atomic.LockedState) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}
			t.Owners = new(atomic.LockedState)
			if err := t.Owners.UnmarshalCBOR(br); err != nil {
				return xerrors.Errorf("unmarshaling t.Owners pointer: %w", err)
			}
		}

	}
	return nil
}

var lengthBufOwners = []byte{129}

func (t *Owners) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufOwners); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.M (map[string]cid.Cid) (map)
	{
		if len(t.M) > 4096 {
			return xerrors.Errorf("cannot marshal t.M map too large")
		}

		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajMap, uint64(len(t.M))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.M))
		for k := range t.M {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.M[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := cbg.WriteCidBuf(scratch, w, v); err != nil {
				return xerrors.Errorf("failed to write cid field v: %w", err)
			}

		}
	}
	return nil
}

func (t *Owners) UnmarshalCBOR(r io.Reader) error {
	*t = Owners{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.M (map[string]cid.Cid) (map)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("t.M: map too large")
	}

	t.M = make(map[string]cid.Cid, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			k = string(sval)
		}

		var v cid.Cid

		{

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field v: %w", err)
			}

			v = c

		}

		t.M[k] = v

	}
	return nil
}

var lengthBufReplaceParams = []byte{129}

func (t *ReplaceParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufReplaceParams); err != nil {
		return err
	}

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *ReplaceParams) UnmarshalCBOR(r io.Reader) error {
	*t = ReplaceParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	return nil
}

var lengthBufOwnParams = []byte{129}

func (t *OwnParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufOwnParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Seed (string) (string)
	if len(t.Seed) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Seed was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Seed))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Seed)); err != nil {
		return err
	}
	return nil
}

func (t *OwnParams) UnmarshalCBOR(r io.Reader) error {
	*t = OwnParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Seed (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Seed = string(sval)
	}
	return nil
}
